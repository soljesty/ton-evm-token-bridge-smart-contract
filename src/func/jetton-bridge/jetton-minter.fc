;; Jettons minter smart contract - Wrapped token from other network

;; storage scheme
;; storage#_ total_supply:Coins admin_address:MsgAddress content:^Cell jetton_wallet_code:^Cell = Storage;

(int, cell, cell) load_data() inline {
    slice ds = get_data().begin_parse();
    return (
        ds~load_coins(), ;; total_supply
        ds~load_ref(),  ;; jetton_wallet_code
        ds~load_ref()  ;; wrapped_token_data
    );
}

() save_data(int total_supply, cell jetton_wallet_code, cell wrapped_token_data) impure inline {
    set_data(begin_cell()
            .store_coins(total_supply)
            .store_ref(jetton_wallet_code)
            .store_ref(wrapped_token_data)
           .end_cell()
    );
}

() mint_tokens(slice to_address, cell jetton_wallet_code, int wallet_coins_amount, int mint_jetton_amount, slice response_address, int query_id, cell wrapped_token_data) impure {
    cell state_init = calculate_jetton_wallet_state_init(to_address, my_address(), jetton_wallet_code, wrapped_token_data);
    slice to_wallet_address = calculate_jetton_wallet_address(state_init);

    cell msg_to_wallet = begin_cell()
    .store_uint(op::internal_transfer(), 32)
    .store_uint(query_id, 64) ;;query id
    .store_coins(mint_jetton_amount)
    .store_slice(my_address());;from_address
    .store_slice(response_address) ;;multisig_address
    .store_coins(0) ;;forward_coins_amounts
    .end_cell();

    var msg = begin_cell()
    .store_uint(0x18, 6)
    .store_slice(to_wallet_address)
    .store_coins(wallet_coins_amount)
    .store_uint(4 + 2 + 1, 1 + 4 + 4 + 64 + 32 + 1 + 1 + 1)
    .store_ref(state_init)
    .store_ref(msg_to_wallet);
    send_raw_message(msg.end_cell(), 1); ;; pay transfer fees separately, revert on errors
}

() recv_internal(int msg_value, cell in_msg_full, slice in_msg_body) impure {
    if (in_msg_body.slice_empty?()) { ;; ignore empty messages
        return ();
    }
    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);

    if (flags & 1) { ;; ignore all bounced messages
        return ();
    }
    slice sender_address = cs~load_msg_addr();
  
    slice in_msg_body_copy = in_msg_body;
    int op = in_msg_body~load_uint(32);
    int query_id = in_msg_body~load_uint(64);
    
    (int total_supply, cell jetton_wallet_code, cell wrapped_token_data) = load_data();

    ;; bridge_address_hash, oracles_address_hash, oracles, state_flags, burn_bridge_fee
    (int bridge_address_hash, _, _, _, _) = get_jetton_bridge_config();
    (_, int sender_address_hash) = parse_std_addr(sender_address);

    if (op == op::mint()) {
        throw_unless(error::bridge_not_sender(), sender_address_hash == bridge_address_hash);
        slice to_address = in_msg_body~load_msg_addr();
        int wallet_coins_amount = in_msg_body~load_coins(); ;;wallet_coins_amount
        int mint_jetton_amount = in_msg_body~load_coins();
        slice response_address = in_msg_body~load_msg_addr();
        mint_tokens(to_address, jetton_wallet_code, wallet_coins_amount, mint_jetton_amount, response_address, query_id, wrapped_token_data);
        save_data(total_supply + mint_jetton_amount, jetton_wallet_code, wrapped_token_data);
        return ();
    }

    if (op == op::burn_notification()) {
        int jetton_amount = in_msg_body~load_coins();
        slice from_address = in_msg_body~load_msg_addr();
        throw_unless(error::owner_not_sender(),
            equal_slices(calculate_user_jetton_wallet_address(from_address, my_address(), jetton_wallet_code, wrapped_token_data), sender_address)
        );
        save_data(total_supply - jetton_amount, jetton_wallet_code, wrapped_token_data);

        builder new_body = begin_cell()
            .store_uint(op, 32)
            .store_uint(query_id, 64)
            .store_ref(begin_cell().store_slice(in_msg_body_copy).end_cell())
            .store_ref(wrapped_token_data);

        builder msg = begin_cell()
                .store_uint(0x10, 6) ;; nobounce - int_msg_info$0 ihr_disabled:Bool bounce:Bool bounced:Bool src:MsgAddress -> 011000
                .store_uint(4, 3).store_int(-1, 8).store_uint(bridge_address_hash, 256)
                .store_coins(0)
                .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
                .store_builder(new_body);
        raw_reserve(1000000000, 2); ;; reserve 1 toncoins for storage-fee 
        send_raw_message(msg.end_cell(), 64); ;; forward to bridge smart contract 

        return ();
    }

    throw(0xffff);
}

(int, int, slice, cell, cell) get_jetton_data() method_id {
    (int total_supply, cell jetton_wallet_code, cell wrapped_token_data) = load_data();
    cell content_dict = new_dict();

    (
        int chain_id,
        int token_address,
        int token_decimals,
        slice token_name,
        slice token_symbol
    ) = unpack_wrapped_token_data(wrapped_token_data);
    
    (int cl, int cv) = encode_number_to_text(token_decimals, 10);
    slice decimals_slice = begin_cell().store_uint(cv, cl * 8).end_cell().begin_parse();

    (int chain_id_len, int chain_id_value) = encode_number_to_text(chain_id, 10);
    ;; (int token_address_len, int token_address_value) = encode_number_to_text(token_address, 16);
    slice token_address_slice = begin_cell()
                                    .store_uint(chain_id_value, chain_id_len * 8)
                                    .store_slice("/")
    ;; .store_uint(token_address_value, token_address_len * 8)
                                .end_cell()
                                .begin_parse();

    content_dict~udict_set_ref(256, "uri"H, pack_string("https://bridge.ton.org/token/", token_address_slice));
    content_dict~udict_set_ref(256, "decimals"H, pack_string(decimals_slice, null()));
    content_dict~udict_set_ref(256, "name"H, pack_string(token_name, null()));
    content_dict~udict_set_ref(256, "symbol"H, pack_string(token_symbol, null()));
    
    cell content = begin_cell().store_uint(0, 8).store_dict(content_dict).end_cell();

    return (total_supply, -1, my_address(), content, jetton_wallet_code);

}

slice get_wallet_address(slice owner_address) method_id {
    (int total_supply, cell jetton_wallet_code, cell wrapped_token_data) = load_data();
    return calculate_user_jetton_wallet_address(owner_address, my_address(), jetton_wallet_code, wrapped_token_data);
}

(int, int, int, slice, slice) get_wrapped_token_data() method_id {
    (int total_supply, cell jetton_wallet_code, cell wrapped_token_data) = load_data();
    return unpack_wrapped_token_data(wrapped_token_data);
}

int get_test() method_id {
    return 105;
}